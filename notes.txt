Structure
images/bronze-dragon.jpg "Picture of Dragon" 
What a user sees on a website is their browser's interpretation of an HTML document sent to them by the server.  HTML is structured like a tree, each element containing multiple elements that can in turn contain multiple elements. The importance of structure is typical for computer code as it helps you convey to the stupid-literal computer what you're trying to do, though the details vary for each language.  In HTML the tree structure is typically shown in the code by indenting child elements.  Some of these elements define blocks, others are inline, and some paragraphs, lists, <a href="https://www.youtube.com/watch?v=cbP2N1BQdYc">links</a> and images like the sweet dragon to the left.

Style
images/bHzgKfH3Kps.jpg "Picture of style" 
The second lesson introduced stylesheets which are pretty mindblowing and give you huge power to customize how your site looks. The HTML defines the structure and content and the CSS defines the form and style.  While everything in HTML is based on boxes, with style sheets you can really make your page look like whatever you want. I was stuck on a plane during this section so I ended up picking apart a nice cached site and stealing elements of their layout.  I learned:
** CSS is cascading, with the most specific element having the most power. Structure is critical both in HTML and CSS and how they link together
** Part of the main point of CSS is creating styles you can re-use, ie rather than repeatedly declaring the same font/margin/etc over and over you can define it once (for example, as a "class") and then point to it whenever you want.  Re-use prevents mistakes, saves time,and improves consistency.
** You seem to be able to combine styles for example span class="greenttext boldtext" would make <span class="greentext boldtext">green bold text</span>:<pre class="codesample">.greentext {
  color: green;
}
.boldtext {
  font-weight: bold;
}</pre>
** Each "box" on a website has layers like an onion from the inside to the outside: content, padding, border, margin. There are lots of rules for style inheritance but rather than pretending to remember : use the little box in "Developer Tools" to experiment. Another key point: CODE->TEST->REFINE
** Helvetica. 'nuff said

Talking to Computers
images/matrix.png "The Matrix"
Computers don't understand natural language primarily because they take things perfectly literally. Programmling languages are designed to bridge the gap between this ultimate literal machine code and something that we humans can understand. Some computer programs are compiled directly into machine code so they can be run as binaries by themselves, while a second style are interpreted, meaning that they require a second program to run by interpreting the code on the spot. Python is an example of this style we'll be using.

Python Details
images/python.jpg "Python"
Raw Python commands, similar to many languages:
** Variables and numbers: number = 1 + 1
** Variables and strings: string = "!" + '!' +'?'
** String chopping: chopped = string[startposition:endposition]
** Lists of anything: list = ['a','n','y','thing!']
** Lists return elements like strings: list[0]
** Lists can be expanded with: list.append(newvalue) but this is different than '+' which concatenates the two together... append adds newvalue as a single element
** REturn length of strings/lists: len(string_or_list)
** Printing text math: print "Text" + number * string[1]
** Finding position in string: string.find('text',start,end)
** Finding if something in list (true/false): value in list
** Quotes: "" '' nested and valid, """""" for multiple lines
** Functions:
def functionname(passtovariable):
    [do stuff with passtovariable]
    return stuff
next command
** While (keeps doing stuff while true):<pre>
while [truefalsetest]:
    [do something when true]
    [do something next when true]
    [break escapes while loop]
next command</pre>
** IfThenElse (does one thing if true and another if false):<pre>
if [truefalsetest]:
    [do something when true or return True]
else:
    [do something when false or return False]
next command</pre>
Other concepts that will be useful...
** Use triple quotes to do several lines like pre """ text on other lines """
** Use positive/negative string indexes to separate tags from text, ie innertext = tagstring[5,-6]
** Def makes a function that can be used later by calling its name and passing data as an input.
** Return defines the output of a function, without which the function does nothing.
** Aliasing can be useful but also cause bugs... this occurs when two variables refer to the same object in memory, for example when you say var1 = var2, and then the underlying object changes, resulting in changes to both vars.

More serious programming
images/stealing.jpg "Stealing is cool"
There are lots of things:
** Object Oriented Programmaing builds on the idea of lazy programming: maximizing the ability to re-use code by defining classes that can be called, re-used, and inherited.  The objects are instances of this code re-used to do something specific... like a Salmon named Fred.  In retrospect, this is a lot like how we used CSS: repeatedly calling CSS styles that could be layered together by the HTML to create the page.
** Importing fundctions from the Python standard library allows you to use functions made for us without having to know how they work: ie, abstraction
** Functions are useful, stealing code is useful
** Functions are not enough - when you have a lot of arguments, or would require lots of customized functions, it would be better to have a template of some kind... thats what a class is.  When you declare a Name = Classname, it creates an instance in memory of Class with name Name.
** You can import pieces of a class instead of just the whole class using "from" and this keeps you from having to essnetially write the whole directory structure with each function call.
** urllib helps you interact with the internet
** Class, Instance = the specific instance of the class created in memory, Constructor = the initialization routine run in the class that builds the instance in memory, Self = reference to the instance itself, Instance variables = the various items inside the class that can be returned when the class is referenced, Instance methods = functions referenced inside the class, class variables = variables that are global across the class including all functions inside (but don't exist outside the class), method overriding = when the child class uses the same method name as the parent, it supersedes. 
** Style guide dictates Title cap for class names, ALL_CAPS for constants.
** Some predefined variables: __name__ returns name of running module, __module__ returns the modules name, __doc__ returns the functions docstring bounded on either side by '''
** An example of using various classes by creating a cool embedded youtube video site: <A HREF="you_tubers.html">VISIT YOUTUBERS!</A>